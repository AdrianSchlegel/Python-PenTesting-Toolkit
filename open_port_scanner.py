import sys
import socket



def print_help():
    print("Usage:")
    print("python script.py <IP_ADDRESS> <PORTS>")
    print("Replace <IP_ADDRESS> with the target IP address to scan for open ports.")
    print("Specify <PORTS> as a single port, a list of ports separated by commas, or a range using '-'")
    print("Examples:")
    print("python script.py 192.168.1.1 80")
    print("python script.py 192.168.1.1 80,443,8080")
    print("python script.py 192.168.1.1 1-1024")

def parse_ports(ports_str):
    ports = []
    if ',' in ports_str:
        ports = [int(port.strip()) for port in ports_str.split(',')]
    elif '-' in ports_str:
        start, end = ports_str.split('-')
        ports = list(range(int(start.strip()), int(end.strip()) + 1))
    else:
        ports = [int(ports_str.strip())]
    return ports

def probe_port(ip, port, timeout=0.5):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            result = sock.connect_ex((ip, port))
            if result == 0:
                return True
    except Exception as e:
        pass
    return False

def scan_ports(ip, ports):
    open_ports = []
    for port in ports:
        sys.stdout.flush()
        if probe_port(ip, port):
            open_ports.append(port)
    return open_ports

def main():

    if len(sys.argv) != 3:
        print_help()
        sys.exit(1)

    ip = sys.argv[1]
    ports_str = sys.argv[2]
    ports = parse_ports(ports_str)
    open_ports = scan_ports(ip, ports)

    if open_ports:
        print("Open Ports are:")
        print(sorted(open_ports))
    else:
        print("Looks like no ports are open.")

if __name__ == "__main__":
    main()